

















































































epoch: 74, loss: 0.46, time: 4.87:  18%|██████████▉                                                | 74/400 [06:46<29:48,  5.49s/it]
Traceback (most recent call last):
  File "src/main.py", line 86, in <module>
    main()
  File "src/main.py", line 67, in main
    trained_model = run_server(dataset, num_clients=args.c, epochs=args.epochs,
  File "/home/abenzaamia/NeuMF/federated/src/server.py", line 35, in run_server
    trained_weights = training_process(server_model, clients, num_clients, epochs, local_epochs, dataset, args)
  File "/home/abenzaamia/NeuMF/federated/src/federeco/train.py", line 66, in training_process
    w, loss = single_train_round(server_model, clients, local_epochs)
  File "/home/abenzaamia/NeuMF/federated/src/federeco/train.py", line 110, in single_train_round
    weights, loss = client.train(server_model_copy, local_epochs)
  File "/home/abenzaamia/NeuMF/federated/src/client.py", line 46, in train
    for _, (u, i, l) in enumerate(dataloader):
  File "/home/abenzaamia/.venv/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 633, in __next__
    data = self._next_data()
  File "/home/abenzaamia/.venv/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 677, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "/home/abenzaamia/.venv/lib/python3.8/site-packages/torch/utils/data/_utils/fetch.py", line 51, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/abenzaamia/.venv/lib/python3.8/site-packages/torch/utils/data/_utils/fetch.py", line 51, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/abenzaamia/.venv/lib/python3.8/site-packages/torch/utils/data/dataset.py", line 196, in __getitem__
    return tuple(tensor[index] for tensor in self.tensors)
  File "/home/abenzaamia/.venv/lib/python3.8/site-packages/torch/utils/data/dataset.py", line 196, in <genexpr>
    return tuple(tensor[index] for tensor in self.tensors)
KeyboardInterrupt